import { EventEmitter, OnDestroy, OnInit, ChangeDetectorRef } from '@angular/core';
import { NotificationAnimationType } from '../../enums/notification-animation-type.enum';
import { Notification } from '../../interfaces/notification.type';
import { Options, Position } from '../../interfaces/options.type';
import { NotificationsService } from '../../services/notifications.service';
import * as ɵngcc0 from '@angular/core';
export declare class SimpleNotificationsComponent implements OnInit, OnDestroy {
    private service;
    private cd;
    constructor(service: NotificationsService, cd: ChangeDetectorRef);
    options: Options;
    create: EventEmitter<any>;
    destroy: EventEmitter<any>;
    notifications: Notification[];
    position: Position;
    private lastNotificationCreated;
    private listener;
    private lastOnBottom;
    private maxStack;
    private preventLastDuplicates;
    private preventDuplicates;
    timeOut: number;
    maxLength: number;
    clickToClose: boolean;
    clickIconToClose: boolean;
    showProgressBar: boolean;
    pauseOnHover: boolean;
    theClass: string;
    rtl: boolean;
    animate: NotificationAnimationType;
    private usingComponentOptions;
    ngOnInit(): void;
    ngOnDestroy(): void;
    defaultBehavior(value: any): void;
    add(item: Notification): void;
    block(item: Notification): boolean;
    checkStandard(checker: Notification, item: Notification): boolean;
    checkHtml(checker: Notification, item: Notification): boolean;
    attachChanges(options: any): void;
    buildEmit(notification: Notification, to: boolean): Notification;
    cleanSingle(id: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SimpleNotificationsComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SimpleNotificationsComponent, "simple-notifications", never, {
    "options": "options";
}, {
    "create": "create";
    "destroy": "destroy";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLW5vdGlmaWNhdGlvbnMuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInNpbXBsZS1ub3RpZmljYXRpb25zLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uQW5pbWF0aW9uVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL25vdGlmaWNhdGlvbi1hbmltYXRpb24tdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9ub3RpZmljYXRpb24udHlwZSc7XHJcbmltcG9ydCB7IE9wdGlvbnMsIFBvc2l0aW9uIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9vcHRpb25zLnR5cGUnO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25zU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL25vdGlmaWNhdGlvbnMuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNpbXBsZU5vdGlmaWNhdGlvbnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIHNlcnZpY2U7XHJcbiAgICBwcml2YXRlIGNkO1xyXG4gICAgY29uc3RydWN0b3Ioc2VydmljZTogTm90aWZpY2F0aW9uc1NlcnZpY2UsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XHJcbiAgICBvcHRpb25zOiBPcHRpb25zO1xyXG4gICAgY3JlYXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGRlc3Ryb3k6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgbm90aWZpY2F0aW9uczogTm90aWZpY2F0aW9uW107XHJcbiAgICBwb3NpdGlvbjogUG9zaXRpb247XHJcbiAgICBwcml2YXRlIGxhc3ROb3RpZmljYXRpb25DcmVhdGVkO1xyXG4gICAgcHJpdmF0ZSBsaXN0ZW5lcjtcclxuICAgIHByaXZhdGUgbGFzdE9uQm90dG9tO1xyXG4gICAgcHJpdmF0ZSBtYXhTdGFjaztcclxuICAgIHByaXZhdGUgcHJldmVudExhc3REdXBsaWNhdGVzO1xyXG4gICAgcHJpdmF0ZSBwcmV2ZW50RHVwbGljYXRlcztcclxuICAgIHRpbWVPdXQ6IG51bWJlcjtcclxuICAgIG1heExlbmd0aDogbnVtYmVyO1xyXG4gICAgY2xpY2tUb0Nsb3NlOiBib29sZWFuO1xyXG4gICAgY2xpY2tJY29uVG9DbG9zZTogYm9vbGVhbjtcclxuICAgIHNob3dQcm9ncmVzc0JhcjogYm9vbGVhbjtcclxuICAgIHBhdXNlT25Ib3ZlcjogYm9vbGVhbjtcclxuICAgIHRoZUNsYXNzOiBzdHJpbmc7XHJcbiAgICBydGw6IGJvb2xlYW47XHJcbiAgICBhbmltYXRlOiBOb3RpZmljYXRpb25BbmltYXRpb25UeXBlO1xyXG4gICAgcHJpdmF0ZSB1c2luZ0NvbXBvbmVudE9wdGlvbnM7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIGRlZmF1bHRCZWhhdmlvcih2YWx1ZTogYW55KTogdm9pZDtcclxuICAgIGFkZChpdGVtOiBOb3RpZmljYXRpb24pOiB2b2lkO1xyXG4gICAgYmxvY2soaXRlbTogTm90aWZpY2F0aW9uKTogYm9vbGVhbjtcclxuICAgIGNoZWNrU3RhbmRhcmQoY2hlY2tlcjogTm90aWZpY2F0aW9uLCBpdGVtOiBOb3RpZmljYXRpb24pOiBib29sZWFuO1xyXG4gICAgY2hlY2tIdG1sKGNoZWNrZXI6IE5vdGlmaWNhdGlvbiwgaXRlbTogTm90aWZpY2F0aW9uKTogYm9vbGVhbjtcclxuICAgIGF0dGFjaENoYW5nZXMob3B0aW9uczogYW55KTogdm9pZDtcclxuICAgIGJ1aWxkRW1pdChub3RpZmljYXRpb246IE5vdGlmaWNhdGlvbiwgdG86IGJvb2xlYW4pOiBOb3RpZmljYXRpb247XHJcbiAgICBjbGVhblNpbmdsZShpZDogc3RyaW5nKTogdm9pZDtcclxufVxyXG4iXX0=